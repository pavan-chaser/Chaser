AWSTemplateFormatVersion: 2010-09-09
Description: Create a VPC
Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
  VPCSubnetCidrBlock:
    Description: 12.0.0.0/16 = 10.0.0.0-10.0.255.255 = 256 Subnets = 65534 hosts
    Type: String
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
  AvailabilityZone1:
    Type: String
  AvailabilityZone2:
    Type: String
  AvailabilityZone3:
    Type: String
  PublicSubnetCidrBlock1:
    Type: String
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
  PublicSubnetCidrBlock2:
    Type: String
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
  PublicSubnetCidrBlock3:
    Type: String
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
  PrivateSubnetCidrBlock1:
    Type: String
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
  PrivateSubnetCidrBlock2:
    Type: String
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
  PrivateSubnetCidrBlock3:
    Type: String
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
  PrivateSubnetCidrBlock4:
    Type: String
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
  PrivateSubnetCidrBlock5:
    Type: String
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
  PrivateSubnetCidrBlock6:
    Type: String
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
  OpenVPNKeyPair:
    Description: Please enter OpenVPN key Pair Name
    Type: String
  InstanceType:
    Description: Please enter Instance Type
    Type: String
  ImageId:
    Description: Please enter Instance ID - 5 Licence
    Type: String
  KopsKeypair:
    Description: Please enter OpenVPN key Pair Name
    Type: String
  KopsInstanceType:
    Description: Please enter Instance Type
    Type: String
  KopsImageId:
    Description: Please enter Inage ID - 5 Licence
    Type: String
  DomainName:
    Type: String
    #Default: etechbrain.com
  SubDomainName:
    Type: String
    #Default: kops-prod.etechbrain.com    
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: !Ref VPCSubnetCidrBlock
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
        - Key: Name
          Value: !Ref 'AWS::StackName'
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Join 
        - ''
        - - !Ref 'AWS::Region'
          - !Ref AvailabilityZone1
      CidrBlock: !Ref PublicSubnetCidrBlock1
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
        - Key: Name
          Value: !Sub '${EnvironmentName} Public Subnet-1(AZ1)'
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Join 
        - ''
        - - !Ref 'AWS::Region'
          - !Ref AvailabilityZone2
      CidrBlock: !Ref PublicSubnetCidrBlock2
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
        - Key: Name
          Value: !Sub '${EnvironmentName} Public Subnet-2 (AZ2)'
  PublicSubnet3:
    Type: 'AWS::EC2::Subnet'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Join 
        - ''
        - - !Ref 'AWS::Region'
          - !Ref AvailabilityZone3
      CidrBlock: !Ref PublicSubnetCidrBlock3
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
        - Key: Name
          Value: !Sub '${EnvironmentName} Public Subnet-3 (AZ3)'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
  GatewayToInternet:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    DependsOn:
      - InternetGateway
      - VPC
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Public Routes'
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn:
      - PublicRouteTable
      - InternetGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
      - PublicSubnet1
      - PublicRouteTable
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
      - PublicSubnet2
      - PublicRouteTable
      - GatewayToInternet
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetRouteTableAssociation3:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
      - PublicSubnet3
      - PublicRouteTable
      - GatewayToInternet
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Join 
        - ''
        - - !Ref 'AWS::Region'
          - !Ref AvailabilityZone1
      CidrBlock: !Ref PrivateSubnetCidrBlock1
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Private Subnet-1 (AZ1)'
  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Join 
        - ''
        - - !Ref 'AWS::Region'
          - !Ref AvailabilityZone2
      CidrBlock: !Ref PrivateSubnetCidrBlock2
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Private Subnet-2 (AZ2)'
  PrivateSubnet3:
    Type: 'AWS::EC2::Subnet'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Join 
        - ''
        - - !Ref 'AWS::Region'
          - !Ref AvailabilityZone3
      CidrBlock: !Ref PrivateSubnetCidrBlock3
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Private Subnet-3 (AZ3)'
  PrivateSubnet4:
    Type: 'AWS::EC2::Subnet'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Join 
        - ''
        - - !Ref 'AWS::Region'
          - !Ref AvailabilityZone1
      CidrBlock: !Ref PrivateSubnetCidrBlock4
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Private Subnet-4 (AZ1)'
  PrivateSubnet5:
    Type: 'AWS::EC2::Subnet'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Join 
        - ''
        - - !Ref 'AWS::Region'
          - !Ref AvailabilityZone2
      CidrBlock: !Ref PrivateSubnetCidrBlock5
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Private Subnet-5 (AZ2)'
  PrivateSubnet6:
    Type: 'AWS::EC2::Subnet'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Join 
        - ''
        - - !Ref 'AWS::Region'
          - !Ref AvailabilityZone3
      CidrBlock: !Ref PrivateSubnetCidrBlock6
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Private Subnet-6 (AZ3)'
  NatGateway1EIP:
    Type: 'AWS::EC2::EIP'
    DependsOn: GatewayToInternet
    Properties:
      Domain: VPC
  NatGateway1:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet3
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Private Routes'
  PrivateRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1
  PrivateSubnetRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
      - PrivateSubnet1
      - PrivateRouteTable
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
      - PrivateSubnet2
      - PrivateRouteTable
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetRouteTableAssociation3:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
      - PrivateSubnet3
      - PrivateRouteTable
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetRouteTableAssociation4:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
      - PrivateSubnet4
      - PrivateRouteTable
    Properties:
      SubnetId: !Ref PrivateSubnet4
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetRouteTableAssociation5:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
      - PrivateSubnet5
      - PrivateRouteTable
    Properties:
      SubnetId: !Ref PrivateSubnet5
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetRouteTableAssociation6:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
      - PrivateSubnet6
      - PrivateRouteTable
    Properties:
      SubnetId: !Ref PrivateSubnet6
      RouteTableId: !Ref PrivateRouteTable
  S3VpcEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    DependsOn:
      - VPC
      - PrivateRouteTable
      - PublicRouteTable
    Properties:
      PolicyDocument:
        Statement:
          - Action: '*'
            Effect: Allow
            Resource: '*'
            Principal: '*'
      RouteTableIds:
        - !Ref PrivateRouteTable
        - !Ref PublicRouteTable
      ServiceName: !Join 
        - ''
        - - com.amazonaws.
          - !Ref 'AWS::Region'
          - .s3
      VpcId: !Ref VPC
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 943
          ToPort: 943
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 1194
          ToPort: 1194
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC
  OpenVpnEc2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      KeyName: !Ref OpenVPNKeyPair
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            DeleteOnTermination: true
            VolumeSize: 8
      InstanceType: !Ref InstanceType
      ImageId: !Ref ImageId
      NetworkInterfaces:
        - DeleteOnTermination: true
          Description: Primary Network Interface
          DeviceIndex: 0
          AssociatePublicIpAddress: false
          SubnetId: !Ref PublicSubnet2
          GroupSet:
            - Ref: InstanceSecurityGroup
      Tags:
        - Key: Name
          Value: OpenVPN-K8s
  EIPAddress:
    Type: 'AWS::EC2::EIP'
    Properties:
      InstanceId: !Ref OpenVpnEc2Instance
  RootRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
  RolePolicies:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: root
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: '*'
            Resource: '*'
      Roles:
        - Ref: RootRole
  RootInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - Ref: RootRole
  KopsSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC
  KopsEc2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      KeyName: !Ref KopsKeypair
      InstanceType: !Ref KopsInstanceType
      ImageId: !Ref KopsImageId
      NetworkInterfaces:
        - DeleteOnTermination: true
          Description: Primary Network Interface
          DeviceIndex: 0
          AssociatePublicIpAddress: true
          SubnetId: !Ref PublicSubnet1
          GroupSet:
            - Ref: KopsSecurityGroup
      IamInstanceProfile: !Ref RootInstanceProfile
      Tags:
        - Key: Name
          Value: Kops-K8s

  DomainHostedZone:
    Type: 'AWS::Route53::HostedZone'
    Properties:
      HostedZoneConfig:
        Comment: !Ref DomainName
      Name: !Ref DomainName
      
  SubDomainHostedZone:
    Type: 'AWS::Route53::HostedZone'
    Properties:
      HostedZoneConfig:
        Comment: !Ref SubDomainName
      Name: !Ref SubDomainName
Outputs:
  VPC:
    Description: Created VPC
    Value: !Ref VPC
  VPCCIDR:
    Description: VPC Subnet CIDR Block
    Value: !Ref VPCSubnetCidrBlock
  VPCe:
    Description: Created VPC Endpoint
    Value: !Ref S3VpcEndpoint
  PublicRouteTable:
    Description: Public Route Table Created for VPC
    Value: !Ref PublicRouteTable
  PrivateRouteTable:
    Description: Private Route Table Created for VPC
    Value: !Ref PrivateRouteTable
  PublicSubnet1:
    Description: Public Subnet 1 Created for VPC
    Value: !Ref PublicSubnet1
  PublicSubnet2:
    Description: Public Subnet 2 Created for VPC
    Value: !Ref PublicSubnet2
  PublicSubnet3:
    Description: Public Subnet 3 Created for VPC
    Value: !Ref PublicSubnet3
  PrivateSubnet1:
    Description: Private Subnet 1 Created for VPC
    Value: !Ref PrivateSubnet1
  PrivateSubnet2:
    Description: Private Subnet 1 Created for VPC
    Value: !Ref PrivateSubnet2
  PrivateSubnet3:
    Description: Private Subnet 1 Created for VPC
    Value: !Ref PrivateSubnet3
  PrivateSubnet4:
    Description: Private Subnet 1 Created for VPC
    Value: !Ref PrivateSubnet4
  PrivateSubnet5:
    Description: Private Subnet 1 Created for VPC
    Value: !Ref PrivateSubnet5
  PrivateSubnet6:
    Description: Private Subnet 1 Created for VPC
    Value: !Ref PrivateSubnet6
  AvailabilityZone1:
    Description: Private Subnet IDs Created for VPC
    Value: !GetAtt PublicSubnet1.AvailabilityZone
  AvailabilityZone2:
    Description: Private Subnet IDs Created for VPC
    Value: !GetAtt PublicSubnet2.AvailabilityZone
  AvailabilityZone3:
    Description: Private Subnet IDs Created for VPC
    Value: !GetAtt PublicSubnet3.AvailabilityZone
  PublicSubnetCidr1:
    Description: Public Subnet IDs Created for VPC
    Value: !Ref PublicSubnetCidrBlock1
  PublicSubnetCidr2:
    Description: Public Subnet IDs Created for VPC
    Value: !Ref PublicSubnetCidrBlock2
  PublicSubnetCidr3:
    Description: Public Subnet IDs Created for VPC
    Value: !Ref PublicSubnetCidrBlock3
  PrivateSubnetCidr1:
    Description: Private Subnet IDs Created for VPC
    Value: !Ref PrivateSubnetCidrBlock1
  PrivateSubnetCidr2:
    Description: Private Subnet IDs Created for VPC
    Value: !Ref PrivateSubnetCidrBlock2
  PrivateSubnetCidr3:
    Description: Private Subnet IDs Created for VPC
    Value: !Ref PrivateSubnetCidrBlock3
  PrivateSubnetCidr4:
    Description: Private Subnet IDs Created for VPC
    Value: !Ref PrivateSubnetCidrBlock4
  PrivateSubnetCidr5:
    Description: Private Subnet IDs Created for VPC
    Value: !Ref PrivateSubnetCidrBlock5
  PrivateSubnetCidr6:
    Description: Private Subnet IDs Created for VPC
    Value: !Ref PrivateSubnetCidrBlock6
  InternetGateway:
    Description: Internet Gateway Created for VPC
    Value: !Ref InternetGateway
  EIP:
    Description: Internet Gateway Created for VPC
    Value: !Ref NatGateway1EIP
  OpenVpnManagementConsole:
    Description: OpenVpn Management Console Access URL
    Value: !Join 
      - ''
      - - 'https://'
        - !GetAtt OpenVpnEc2Instance.PrivateIp
        - ':943/admin'
  OpenVpnLoginUrl:
    Description: OpenVpn Management User Login URL
    Value: !Join 
      - ''
      - - 'https://'
        - !GetAtt OpenVpnEc2Instance.PublicIp
        - ':443/'